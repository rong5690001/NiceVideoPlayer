package com.rong.nicevideoplayer;import android.content.res.Configuration;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.View;import com.rong.videoplayer.VPController;import com.rong.videoplayer.VideoPlayer;import com.rong.videoplayer.VideoPlayerCallBack;import com.rong.videoplayer.VideoPlayerManager;import com.ok.library.ItemViewBind;import com.ok.library.OkAdapter;import com.ok.library.OkViewHold;import java.util.ArrayList;import java.util.List;public class VideoListActivity extends AppCompatActivity {    private static final int NO_POSITION = -1;    private RecyclerView mRecyclerView;    private OkAdapter mOkAdapter;    private int mCurrentPlayPosition;    private List<String> videoUrls;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_video_list);        mRecyclerView = findViewById(R.id.recyclerView);        videoUrls = new ArrayList<>();        for (int i = 0; i < 20; i++) {//            videoUrls.add("http://img1.uat1.rs.com/g1/M00/02/75/wKh8y1n66tOAGxD2AdkzIDOWjSM724//            .mp4");//            videoUrls.add("http://ozpcquub7.bkt.clouddn.com/lhzyyTOvprHn_xovbu-J9s0UEP0J");            videoUrls.add("https://img1.mklimg.com/g1/M00/20/83/rBBrBVn8MzKAGaGiAR7JrU5z8-A397" +                    ".mp4");//            videoUrls.add("http://ozpcquub7.bkt.clouddn.com/lgIbpn_7Ycm18kE0-5FNHkizrc8j");        }        mOkAdapter = new OkAdapter(this, videoUrls) {            @Override            public void onViewAttachedToWindow(@NonNull OkViewHold holder) {                super.onViewAttachedToWindow(holder);                //当前播放的视频在屏幕外                VideoPlayer videoPlayer = holder.findViewById(R.id.videoPlayer);                if (videoPlayer == VideoPlayerManager.getInstance().getCurrentVideoPlayer()                        && !videoPlayer.isFullScreen()) {                    releaseVideoPlayer();                }            }        };        mOkAdapter.register(String.class, new ItemViewBind<String>() {            @Override            public void onBind(final OkViewHold holder, final int position, String item) {                final VideoPlayer videoPlayer = holder.findViewById(R.id.videoPlayer);                final View imageView = holder.findViewById(R.id.imageView);                ((View) holder.findViewById(R.id.imageView)).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        VideoPlayerManager.getInstance().releaseVideoPlayer();                        mCurrentPlayPosition = holder.getAdapterPosition();                        videoPlayer.setUp(videoUrls.get(mCurrentPlayPosition), "", true);                        videoPlayer.start();                        v.setVisibility(View.GONE);                    }                });                videoPlayer.setVideoPlayerCallBack(new VideoPlayerCallBack() {                    @Override                    public void onStop() {                        imageView.setVisibility(View.VISIBLE);                    }                    @Override                    public void onRelease() {                        onStop();                    }                });                videoPlayer.setMediaController(new VPController(getContext(), false, false));                videoPlayer.setInList(true);                getRecyclerView().addOnScrollListener(new RecyclerView.OnScrollListener() {                    @Override                    public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {                        super.onScrolled(recyclerView, dx, dy);                        LinearLayoutManager linearLayoutManager = (LinearLayoutManager) recyclerView                                .getLayoutManager();                        if (mCurrentPlayPosition != NO_POSITION                                && (linearLayoutManager.findFirstVisibleItemPosition() > mCurrentPlayPosition                                || linearLayoutManager.findLastVisibleItemPosition() < mCurrentPlayPosition)) {                            releaseVideoPlayer();                        }                    }                });            }            @Override            public int getLayoutId(int viewType) {                return R.layout.item_video;            }        });        mRecyclerView.setAdapter(mOkAdapter);        mRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL                , false));        mOkAdapter.notifyDataSetChanged();//        mOkAdapter.addAll(mOkAdapter);    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);    }    @Override    public void onBackPressed() {        if (!VideoPlayerManager.getInstance().onBackPressed()) {//            super.onBackPressed();        }    }    @Override    protected void onResume() {        super.onResume();        VideoPlayerManager.getInstance().onResumeVideoPlayer();    }    @Override    protected void onPause() {        super.onPause();        VideoPlayerManager.getInstance().onPauseVideoPlayer();    }    @Override    protected void onDestroy() {        VideoPlayerManager.getInstance().releaseVideoPlayerAndGone();        VideoPlayerManager.getInstance().unregisterNetWorkChangedReceiver(this);        super.onDestroy();    }    /**     * 释放视频播放     */    private void releaseVideoPlayer() {        mCurrentPlayPosition = NO_POSITION;        VideoPlayerManager.getInstance().releaseVideoPlayer();    }}