package com.rong.videoplayer;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.view.View;/** * Created by chen.huarong on 2018/11/19. * 播放器管理类 */public class VideoPlayerManager {    private VideoPlayer mVideoPlayer;//当前正在播放的播放器    private boolean canPlayOnMobileNet = false;//在移动网络下能否播放视频    private boolean isSystemPause = false;//是否系统暂停(用于系统暂停后的状态恢复)    private static VideoPlayerManager mInstance;    private NetWorkChangedBroadcastReceiver mNetReceiver;//网络广播接收    public static synchronized VideoPlayerManager getInstance() {        if (mInstance == null) {            mInstance = new VideoPlayerManager();        }        return mInstance;    }    public VideoPlayer getCurrentVideoPlayer() {        return mVideoPlayer;    }    public void setCurrentVideoPlayer(VideoPlayer videoPlayer) {        this.mVideoPlayer = videoPlayer;    }    /**     * 生命周期onResume的时候（如果之前是正在播放则恢复播放，之前是暂停则继续暂停）     */    public void onResumeVideoPlayer() {        systemRestartVideoPlayer();    }    /**     * 生命周期onPause的时候暂停播放     */    public void onPauseVideoPlayer() {        systemPauseVideoPlayer();    }    /**     * 系统暂停后的重新播放     *     * @return 是否续播成功     */    private boolean systemRestartVideoPlayer() {        if (mVideoPlayer != null && isSystemPause) {            if (mVideoPlayer.isIdle()) {                mVideoPlayer.start();            } else {                mVideoPlayer.restart();            }            isSystemPause = false;        }        return !isSystemPause;    }    /**     * 系统暂停播放器     * @return 是否暂停成功     */    private boolean systemPauseVideoPlayer() {        if (mVideoPlayer != null && !isSystemPause && !mVideoPlayer.isPaused() && !mVideoPlayer.isBufferingPaused()) {            isSystemPause = mVideoPlayer.pause();            if (!isSystemPause) {                mVideoPlayer.release();            }        }        return isSystemPause;    }    /**     * 释放当前播放器     */    public void releaseVideoPlayer() {        if (mVideoPlayer != null) {            mVideoPlayer.release();            mVideoPlayer = null;            isSystemPause = false;        }    }    /**     * 释放当前播放器并且隐藏播放器     */    public void releaseVideoPlayerAndGone() {        if (mVideoPlayer != null) {            mVideoPlayer.release();            mVideoPlayer.setVisibility(View.GONE);            mVideoPlayer = null;            isSystemPause = false;        }    }    /**     * 在onBackPressed方法里面调用调用     *     * @return     */    public boolean onBackPressed() {        if (mVideoPlayer != null) {            if (mVideoPlayer.isFullScreen()) {                return mVideoPlayer.exitFullScreen();            }        }        return false;    }    /**     * 注册网络广播监听     *     * @param context     */    public void registerNetWorkChangedReceiver(Context context) {        IntentFilter filter = new IntentFilter();        filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);        if (mNetReceiver == null) {            //监听网络            mNetReceiver = new NetWorkChangedBroadcastReceiver();        }        context.registerReceiver(mNetReceiver, filter);    }    /**     * 注销网络广播监听     *     * @param context     */    public void unregisterNetWorkChangedReceiver(Context context) {        try {            if (mNetReceiver != null) {                context.unregisterReceiver(mNetReceiver);            }        } catch (Exception e) {//            LogUtil.e("注销网络广播监听出错" + e.getMessage());        }    }    /**     * 获取当前网络状态     */    public int getNetWorkStates(Context context) {        return NetUtil.getConnectedType(context);    }    public void setCanPlayOnMobileNet(boolean canPlayOnMobileNet) {        this.canPlayOnMobileNet = canPlayOnMobileNet;    }    public boolean isCanPlayOnMobileNet() {        return canPlayOnMobileNet;    }    /**     * 检查是否可以播放视频     * PS:当网络状态不是移动网络或者用户允许在移动网络下播放视频     *     * @param context     * @return     */    public boolean checkCanPlay(Context context) {        return getNetWorkStates(context) != ConnectivityManager.TYPE_MOBILE                || canPlayOnMobileNet;    }    /**     * 网络状态广播接收器     */    class NetWorkChangedBroadcastReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {                ConnectivityManager manager = (ConnectivityManager) context                        .getSystemService(Context.CONNECTIVITY_SERVICE);                NetworkInfo activeNetwork = manager.getActiveNetworkInfo();                if (!(activeNetwork != null && activeNetwork.isConnected())) {//无网络连接                    if (mVideoPlayer != null) {                        mVideoPlayer.onNetWorkChanged(IVideoPlayer.NET_STATES_NO);                    }                } else if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI) {//连接wifi                    systemRestartVideoPlayer();                    if (mVideoPlayer != null) {                        mVideoPlayer.onNetWorkChanged(IVideoPlayer.NET_STATES_WIFI);                    }                } else if (activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE) {//移动网络                    if (mVideoPlayer != null) {                        if (canPlayOnMobileNet) {//同意移到网络下敀                            if (isSystemPause) {//系统暂停                                if (mVideoPlayer.isIdle()) {                                    mVideoPlayer.start();                                } else {                                    systemRestartVideoPlayer();                                }                            }                        } else {                            if (mVideoPlayer.isPreparing() || mVideoPlayer.isPrepared()) {                                mVideoPlayer.releasePlayer();                                isSystemPause = true;                            } else {                                systemPauseVideoPlayer();                            }                        }                        mVideoPlayer.onNetWorkChanged(IVideoPlayer.NET_STATES_MOBILE);                    }                }            }        }    }}